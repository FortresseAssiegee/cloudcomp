// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	avt "cldcmp/service/internal/handler/avt"
	baseInfo "cldcmp/service/internal/handler/baseInfo"
	dayActv "cldcmp/service/internal/handler/dayActv"
	dayWeb "cldcmp/service/internal/handler/dayWeb"
	examInfo "cldcmp/service/internal/handler/examInfo"
	grade "cldcmp/service/internal/handler/grade"
	infoTree "cldcmp/service/internal/handler/infoTree"
	joinInfo "cldcmp/service/internal/handler/joinInfo"
	joinUnitInfo "cldcmp/service/internal/handler/joinUnitInfo"
	login "cldcmp/service/internal/handler/login"
	tags "cldcmp/service/internal/handler/tags"
	unitTree "cldcmp/service/internal/handler/unitTree"
	userInfo "cldcmp/service/internal/handler/userInfo"
	"cldcmp/service/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/add",
				Handler: baseInfo.AddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getOne",
				Handler: baseInfo.GetOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getAll",
				Handler: baseInfo.GetAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/edit",
				Handler: baseInfo.EditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/del",
				Handler: baseInfo.DelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/out",
				Handler: baseInfo.OutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/pubulish",
				Handler: baseInfo.PubulishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/down",
				Handler: baseInfo.DownHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getHotTagShowList",
				Handler: baseInfo.GetHotTagShowListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getTagShowList",
				Handler: baseInfo.GetTagShowListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getAllNoUser",
				Handler: baseInfo.GetAllNoUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getRankAll",
				Handler: baseInfo.GetRankAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/baseInfo/getRankHome",
				Handler: baseInfo.GetRankHomeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/add",
				Handler: infoTree.AddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/get",
				Handler: infoTree.GetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/edit",
				Handler: infoTree.EditHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/del",
				Handler: infoTree.DelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/addOne",
				Handler: infoTree.AddOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/getOne",
				Handler: infoTree.GetOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/editOne",
				Handler: infoTree.EditOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/infoTree/delOne",
				Handler: infoTree.DelOneHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/unitTree/get",
				Handler: unitTree.GetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/unitTree/addOne",
				Handler: unitTree.AddOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/unitTree/getOne",
				Handler: unitTree.GetOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/unitTree/editOne",
				Handler: unitTree.EditOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/unitTree/delOne",
				Handler: unitTree.DelOneHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/examInfo/get",
				Handler: examInfo.GetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/examInfo/addOne",
				Handler: examInfo.AddOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/examInfo/getOne",
				Handler: examInfo.GetOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/examInfo/editOne",
				Handler: examInfo.EditOneHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/examInfo/delOne",
				Handler: examInfo.DelOneHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dayActv/addHot",
				Handler: dayActv.AddHotHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dayActv/addJoin",
				Handler: dayActv.AddJoinHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dayActv/AddLookup",
				Handler: dayActv.AddLookupActvHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/joinInfo/join",
				Handler: joinInfo.JoinHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinInfo/out",
				Handler: joinInfo.OutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinInfo/checkJoin",
				Handler: joinInfo.CheckJoinHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinInfo/getAllListActv",
				Handler: joinInfo.GetAllListActvHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinInfo/getAllListJoin",
				Handler: joinInfo.GetAllListJoinHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/startExam",
				Handler: joinUnitInfo.StartExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/endExam",
				Handler: joinUnitInfo.EndExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/startExam52",
				Handler: joinUnitInfo.StartExam52Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/endExam52",
				Handler: joinUnitInfo.EndExam52Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/startExam53",
				Handler: joinUnitInfo.StartExam53Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/endExam53",
				Handler: joinUnitInfo.EndExam53Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/getRankList",
				Handler: joinUnitInfo.GetRankListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/getList",
				Handler: joinUnitInfo.GetListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/simOss",
				Handler: joinUnitInfo.SimOssHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/checkExam",
				Handler: joinUnitInfo.CheckExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/joinUnitInfo/delExam",
				Handler: joinUnitInfo.DelExamHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sign",
				Handler: login.SignHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/forgetPwd",
				Handler: login.ForgetPwdHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/avt/oss",
				Handler: avt.OssHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/userInfo/editInfo",
				Handler: userInfo.EditInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userInfo/editPwd",
				Handler: userInfo.EditPwdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userInfo/getInfo",
				Handler: userInfo.GetInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tags/addOneTag",
				Handler: tags.AddOneTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tags/delOneTag",
				Handler: tags.DelOneTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tags/editOneTag",
				Handler: tags.EditOneTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tags/getTagList",
				Handler: tags.GetTagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tags/keepHotTagList",
				Handler: tags.KeepHotTagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tags/getHotTagList",
				Handler: tags.GetHotTagListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/grade/applyGrade",
				Handler: grade.ApplyGradeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/grade/getNewGradeInfo",
				Handler: grade.GetNewGradeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/grade/getPassGradeInfo",
				Handler: grade.GetPassGradeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/grade/replyGrade",
				Handler: grade.ReplyGradeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/grade/GetOneGrade",
				Handler: grade.GetOneGradeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/grade/GetAllGrade",
				Handler: grade.GetAllGradeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dayWeb/addApplyGrade",
				Handler: dayWeb.AddApplyGradeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dayWeb/addLogin",
				Handler: dayWeb.AddLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/dayWeb/addLookup",
				Handler: dayWeb.AddLookupWebHandler(serverCtx),
			},
		},
	)
}
