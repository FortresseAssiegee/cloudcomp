// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gradeInfoFieldNames          = builder.RawFieldNames(&GradeInfo{})
	gradeInfoRows                = strings.Join(gradeInfoFieldNames, ",")
	gradeInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(gradeInfoFieldNames, "`grade_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	gradeInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(gradeInfoFieldNames, "`grade_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompGradeInfoGradeIdPrefix = "cache:cloudcomp:gradeInfo:gradeId:"
	// cacheCloudcompGradeInfoGradeCodePrefix ="cache:cloudcomp:gradeInfo:stateCode:"
	// cacheCloudcompGradeInfoUserIdPrefix = "cache:cloudcomp:gradeInfo:userId:"
)

type (
	gradeInfoModel interface {
		Insert(ctx context.Context, data *GradeInfo) (sql.Result, error)
		FindOne(ctx context.Context, gradeId int64) (*GradeInfo, error)
		Update(ctx context.Context, data *GradeInfo) error
		Delete(ctx context.Context, gradeId int64) error
		FindAllGradeByUserId(ctx context.Context,UserId int64) ([]*GradeInfo, error)
		// flag 为true表示找出未处理，反之
		FindAllGradeByCode(ctx context.Context,code int64,flag bool)([]*GradeInfo, error)
	}

	defaultGradeInfoModel struct {
		sqlc.CachedConn
		table string
	}

	GradeInfo struct {
		GradeId    int64     `db:"grade_id"`
		UserId     int64     `db:"user_id"`     // 申请人
		ApplyIntro string    `db:"apply_intro"` // 补充信息
		GradeCode  int64     `db:"grade_code"`  // 是否处理
		ReplyIntro string    `db:"reply_intro"` // 回复
		StartTime  string    `db:"start_time"`  // 申请时间
		EndTime    string    `db:"end_time"`    // 处理时间
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
	
)

func newGradeInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGradeInfoModel {
	return &defaultGradeInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`grade_info`",
	}
}

func (m *defaultGradeInfoModel) Delete(ctx context.Context, gradeId int64) error {
	cloudcompGradeInfoGradeIdKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeIdPrefix, gradeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `grade_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, gradeId)
	}, cloudcompGradeInfoGradeIdKey)
	return err
}

func (m *defaultGradeInfoModel) FindOne(ctx context.Context, gradeId int64) (*GradeInfo, error) {
	cloudcompGradeInfoGradeIdKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeIdPrefix, gradeId)
	var resp GradeInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompGradeInfoGradeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `grade_id` = ? limit 1", gradeInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, gradeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGradeInfoModel) Insert(ctx context.Context, data *GradeInfo) (sql.Result, error) {
	cloudcompGradeInfoGradeIdKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeIdPrefix, data.GradeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, gradeInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ApplyIntro, data.GradeCode, data.ReplyIntro, data.StartTime, data.EndTime)
	}, cloudcompGradeInfoGradeIdKey)
	return ret, err
}

func (m *defaultGradeInfoModel) Update(ctx context.Context, data *GradeInfo) error {
	cloudcompGradeInfoGradeIdKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeIdPrefix, data.GradeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `grade_id` = ?", m.table, gradeInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ApplyIntro, data.GradeCode, data.ReplyIntro, data.StartTime, data.EndTime, data.GradeId)
	}, cloudcompGradeInfoGradeIdKey)
	return err
}

func (m *defaultGradeInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeIdPrefix, primary)
}

func (m *defaultGradeInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `grade_id` = ? limit 1", gradeInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGradeInfoModel) tableName() string {
	return m.table
}

   // 自己添加
func (m *defaultGradeInfoModel) FindAllGradeByUserId(ctx context.Context,UserId int64) ([]*GradeInfo, error) {
	// cacheCloudcompGradeInfoUserIdKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoUserIdPrefix,UserId)
	// fmt.Println(cacheCloudcompGradeInfoUserIdKey)
	var resp []*GradeInfo
	// err := m.QueryRowCtx(ctx, &resp, cacheCloudcompGradeInfoUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
	// 	query := fmt.Sprintf("select %s from %s where `user_id` = ?", gradeInfoRows, m.table)
	// 	return conn.QueryRowCtx(ctx,v, query, UserId)
	// })

	query := fmt.Sprintf("select %s from %s where `user_id` = ?", gradeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, UserId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

func (m *defaultGradeInfoModel) FindAllGradeByCode(ctx context.Context,code int64,flag bool) ([]*GradeInfo, error){
	// cacheCloudcompGradeInfoGradeCodeKey := fmt.Sprintf("%s%v", cacheCloudcompGradeInfoGradeCodePrefix, code)
	var resp []*GradeInfo
	var err error
	if flag {
		// err = m.QueryRowCtx(ctx, &resp, cacheCloudcompGradeInfoGradeCodeKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		// 	query := fmt.Sprintf("select %s from %s where `grade_code` = ?", gradeInfoRows, m.table)
		// 	return conn.QueryRowCtx(ctx, v, query, code)
		// })
		query :=  fmt.Sprintf("select %s from %s where `grade_code` = ?", gradeInfoRows, m.table)
		err = m.QueryRowsNoCache(&resp, query, code)

	}else{
		// err = m.QueryRowCtx(ctx, &resp, cacheCloudcompGradeInfoGradeCodeKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		// 	query := fmt.Sprintf("select %s from %s where `grade_code` != ?", gradeInfoRows, m.table)
		// 	return conn.QueryRowCtx(ctx, v, query, code)
		// })
		query :=  fmt.Sprintf("select %s from %s where `grade_code` != ?", gradeInfoRows, m.table)
		err = m.QueryRowsNoCache(&resp, query, code)

	}

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

