// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	compeInfoFieldNames          = builder.RawFieldNames(&CompeInfo{})
	compeInfoRows                = strings.Join(compeInfoFieldNames, ",")
	compeInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(compeInfoFieldNames, "`actv_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	compeInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(compeInfoFieldNames, "`actv_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompCompeInfoActvIdPrefix = "cache:cloudcomp:compeInfo:actvId:"
	cacheCloudcompCompeInfoSearchPrefix="cache:cloudcomp:compeInfo:search:"
)

type (
	compeInfoModel interface {
		Insert(ctx context.Context, data *CompeInfo) (sql.Result, error)
		FindOne(ctx context.Context, actvId int64) (*CompeInfo, error)
		Update(ctx context.Context, data *CompeInfo) error
		Delete(ctx context.Context, actvId int64) error
		FindAllActvByUserId(userId int64) ([]*CompeInfo, error)
		FindAllActvByUserIdJoin(userId int64) ([]*CompeInfo, error)
		FindAllActvByUserIdCreate(userId int64) ([]*CompeInfo, error) 
		FindAllActvByNoUser() ([]*CompeInfo, error)
		FindAllActvByTag(TagCode int64) ([]*CompeInfo, error) 
		FindAllActvByPeriodAwardTagExam(periodCode,awardCode,tagCode,examCode []int64) ([]*CompeInfo, error)
		SearchByActvName(ctx context.Context,actvName string) ([]*CompeInfo, error)
	
	}

	defaultCompeInfoModel struct {
		sqlc.CachedConn
		table string
	}

	CompeInfo struct {
		ActvId          int64     `db:"actv_id"`
		UserId          int64     `db:"user_id"`          // 创建活动的用户id
		InfoDegree      int64     `db:"info_degree"`      // 用来存放完善度
		StateCode       int64     `db:"state_code"`       // 报名状态：10 进行中，11 已结束
		PeriodCode      int64     `db:"period_code"`      // 比赛周期：30 未选择，31 一周，32 半个月 ...
		AwardCode       int64     `db:"award_code"`       // 有无奖：40 无，41 有
		ActvName        string    `db:"actv_name"`        // 活动名字
		TagCode         int64     `db:"tag_code"`         // 类型标签
		ExamCode        int64     `db:"exam_code"`        // 考试模式
		Intro           string    `db:"intro"`            // 介绍不超过1000字
		Pstr            string    `db:"pstr"`             // 海报
		HotNum          int64     `db:"hot_num"`          // 热度
		StartTime       string    `db:"start_time"`       // 活动开始时间
		EndTime         string    `db:"end_time"`         // 活动结束时间
		ApplyStartTime  string    `db:"apply_start_time"` // 活动报名时间
		ApplyEndTime    string    `db:"apply_end_time"`   // 活动报名结束时间
		ExamStartTime   string    `db:"exam_start_time"`  // 考试开始时间
		ExamEndTime     string    `db:"exam_end_time"`    // 考试结束时间
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
		CreateUserTel   string    `db:"create_user_tel"`
		CreateUserEmail string    `db:"create_user_email"`
	}
)

func newCompeInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCompeInfoModel {
	return &defaultCompeInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`compe_info`",
	}
}

func (m *defaultCompeInfoModel) Delete(ctx context.Context, actvId int64) error {
	cloudcompCompeInfoActvIdKey := fmt.Sprintf("%s%v", cacheCloudcompCompeInfoActvIdPrefix, actvId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `actv_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, actvId)
	}, cloudcompCompeInfoActvIdKey)
	return err
}

func (m *defaultCompeInfoModel) FindOne(ctx context.Context, actvId int64) (*CompeInfo, error) {
	cloudcompCompeInfoActvIdKey := fmt.Sprintf("%s%v", cacheCloudcompCompeInfoActvIdPrefix, actvId)
	var resp CompeInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompCompeInfoActvIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `actv_id` = ? limit 1", compeInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, actvId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCompeInfoModel) Insert(ctx context.Context, data *CompeInfo) (sql.Result, error) {
	cloudcompCompeInfoActvIdKey := fmt.Sprintf("%s%v", cacheCloudcompCompeInfoActvIdPrefix, data.ActvId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, compeInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.InfoDegree, data.StateCode, data.PeriodCode, data.AwardCode, data.ActvName, data.TagCode, data.ExamCode, data.Intro, data.Pstr, data.HotNum, data.StartTime, data.EndTime, data.ApplyStartTime, data.ApplyEndTime, data.ExamStartTime, data.ExamEndTime, data.CreateUserTel, data.CreateUserEmail)
	}, cloudcompCompeInfoActvIdKey)
	return ret, err
}

func (m *defaultCompeInfoModel) Update(ctx context.Context, data *CompeInfo) error {
	cloudcompCompeInfoActvIdKey := fmt.Sprintf("%s%v", cacheCloudcompCompeInfoActvIdPrefix, data.ActvId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `actv_id` = ?", m.table, compeInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.InfoDegree, data.StateCode, data.PeriodCode, data.AwardCode, data.ActvName, data.TagCode, data.ExamCode, data.Intro, data.Pstr, data.HotNum, data.StartTime, data.EndTime, data.ApplyStartTime, data.ApplyEndTime, data.ExamStartTime, data.ExamEndTime, data.CreateUserTel, data.CreateUserEmail, data.ActvId)
	}, cloudcompCompeInfoActvIdKey)
	return err
}

func (m *defaultCompeInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompCompeInfoActvIdPrefix, primary)
}

func (m *defaultCompeInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `actv_id` = ? limit 1", compeInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCompeInfoModel) tableName() string {
	return m.table
}


// 自己添加
func (m *defaultCompeInfoModel) FindAllActvByUserId(userId int64) ([]*CompeInfo, error) {
	var resp []*CompeInfo
	fmt.Println("\nFindAllActvByUserId")
	query := fmt.Sprintf("select %s from %s where `user_id` = ? ", compeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, userId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

func (m *defaultCompeInfoModel) FindAllActvByUserIdJoin(userId int64) ([]*CompeInfo, error) {
	var resp []*CompeInfo
   
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `state_code`= 11 ", compeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, userId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}
func (m *defaultCompeInfoModel) FindAllActvByUserIdCreate(userId int64) ([]*CompeInfo, error) {
	var resp []*CompeInfo
   
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `state_code`= 10 ", compeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, userId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}
// 查找所有活动
func (m *defaultCompeInfoModel) FindAllActvByNoUser() ([]*CompeInfo, error) {
	var resp []*CompeInfo
   
	query := fmt.Sprintf("select %s from %s where `state_code`= 11 ", compeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

// 通过活动类型查找所有活动
func (m *defaultCompeInfoModel) FindAllActvByTag(TagCode int64) ([]*CompeInfo, error) {
	var resp []*CompeInfo
   
	query := fmt.Sprintf("select %s from %s where `state_code`= 11 and `tag_code`= ?", compeInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query,TagCode)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

// 通过标签 查找所有活动
func (m *defaultCompeInfoModel) FindAllActvByPeriodAwardTagExam(periodCode,awardCode,tagCode,examCode []int64) ([]*CompeInfo, error) {
	var resp []*CompeInfo
	// str :=
	// if periodCode==0 {
	// 	periodCode=
	// }
	periodStr :=int64ArrToStr(periodCode,",")
	awardStr :=int64ArrToStr(awardCode,",")
	tagStr :=int64ArrToStr(tagCode,",")
	examStr :=int64ArrToStr(examCode,",")
	fmt.Printf("tagStr:%s\n",tagStr)
	fmt.Printf("examStr:%s\n",examStr)
	
	// query := fmt.Sprintf("select %s from %s where `state_code`= 11 and `period_code` in(%s) " , compeInfoRows, m.table,periodStr,)
	// err := m.QueryRowsNoCache(&resp, query)
	query := fmt.Sprintf("select %s from %s where `state_code`= 11 and `period_code` in( %s ) and `award_code` in ( %s ) and `tag_code` in ( %s ) and `exam_code` in ( %s ) ;" , compeInfoRows, m.table,periodStr,awardStr,tagStr,examStr)
	fmt.Printf("query:%s\n",query)
	err := m.QueryRowsNoCache(&resp, query)

   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

func int64ArrToStr(arr []int64, s string) string {
	var rs string
	num := len(arr) - 1
	for i, item := range arr {
		strItem :=fmt.Sprintf("%d",item)
		if i != num {
			rs += strItem+ s
		} else {
			rs += strItem
		}
	}
	return rs

}

// periodCode
// awardCode
// tagCode
// examCode
// face


func (m *defaultCompeInfoModel) SearchByActvName(ctx context.Context,actvName string) ([]*CompeInfo, error){

	cacheCloudcompCompeInfoSearchKey := fmt.Sprintf("%s%v",cacheCloudcompCompeInfoSearchPrefix, actvName)

	var resp []*CompeInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompCompeInfoSearchKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s  WHERE `actv_name` LIKE '%c%s%c'", userInfoRows, m.table,'%',actvName,'%')
		fmt.Printf("---------------------------------------------SearchByActvName query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
