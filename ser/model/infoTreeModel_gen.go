// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	infoTreeFieldNames          = builder.RawFieldNames(&InfoTree{})
	infoTreeRows                = strings.Join(infoTreeFieldNames, ",")
	infoTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(infoTreeFieldNames, "`info_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	infoTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(infoTreeFieldNames, "`info_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompInfoTreeInfoIdPrefix = "cache:cloudcomp:infoTree:infoId:"
)

type (
	infoTreeModel interface {
		Insert(ctx context.Context, data *InfoTree) (sql.Result, error)
		FindOne(ctx context.Context, infoId int64) (*InfoTree, error)
		Update(ctx context.Context, data *InfoTree) error
		Delete(ctx context.Context, infoId int64) error
		FindAllActvByActvId(ActvId int64) ([]*InfoTree, error)
	}

	defaultInfoTreeModel struct {
		sqlc.CachedConn
		table string
	}

	InfoTree struct {
		InfoId     int64     `db:"info_id"`
		ActvId     int64     `db:"actv_id"`   // 那个活动的id
		ParentId   int64     `db:"parent_id"` // 父节点
		Title      string    `db:"title"`     // 节点名称
		Content    string    `db:"content"`   // 介绍不超过10000字
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newInfoTreeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultInfoTreeModel {
	return &defaultInfoTreeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`info_tree`",
	}
}

func (m *defaultInfoTreeModel) Delete(ctx context.Context, infoId int64) error {
	cloudcompInfoTreeInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompInfoTreeInfoIdPrefix, infoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `info_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, infoId)
	}, cloudcompInfoTreeInfoIdKey)
	return err
}

func (m *defaultInfoTreeModel) FindOne(ctx context.Context, infoId int64) (*InfoTree, error) {
	cloudcompInfoTreeInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompInfoTreeInfoIdPrefix, infoId)
	var resp InfoTree
	err := m.QueryRowCtx(ctx, &resp, cloudcompInfoTreeInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `info_id` = ? limit 1", infoTreeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, infoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInfoTreeModel) Insert(ctx context.Context, data *InfoTree) (sql.Result, error) {
	cloudcompInfoTreeInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompInfoTreeInfoIdPrefix, data.InfoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, infoTreeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ActvId, data.ParentId, data.Title, data.Content)
	}, cloudcompInfoTreeInfoIdKey)
	return ret, err
}

func (m *defaultInfoTreeModel) Update(ctx context.Context, data *InfoTree) error {
	cloudcompInfoTreeInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompInfoTreeInfoIdPrefix, data.InfoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `info_id` = ?", m.table, infoTreeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ActvId, data.ParentId, data.Title, data.Content, data.InfoId)
	}, cloudcompInfoTreeInfoIdKey)
	return err
}

func (m *defaultInfoTreeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompInfoTreeInfoIdPrefix, primary)
}

func (m *defaultInfoTreeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `info_id` = ? limit 1", infoTreeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultInfoTreeModel) tableName() string {
	return m.table
}

   // 自己添加
   func (m *defaultInfoTreeModel) FindAllActvByActvId(ActvId int64) ([]*InfoTree, error) {
	var resp []*InfoTree
   
	query := fmt.Sprintf("select %s from %s where `actv_id` = ?", infoTreeRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, ActvId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
   }
