// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dayAtcvInfoFieldNames          = builder.RawFieldNames(&DayAtcvInfo{})
	dayAtcvInfoRows                = strings.Join(dayAtcvInfoFieldNames, ",")
	dayAtcvInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(dayAtcvInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	dayAtcvInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(dayAtcvInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompDayAtcvInfoIdPrefix = "cache:cloudcomp:dayAtcvInfo:id:"
	cacheCloudcompDayAtcvInfoDateActvPrefix = "cache:cloudcomp:dayAtcvInfo:"
	
	cacheCloudcompDayAtcvInfoHotDatePrefix = "cache:cloudcomp:dayAtcvInfo:hot:date:"
	cacheCloudcompDayAtcvInfoLookupDatePrefix = "cache:cloudcomp:dayAtcvInfo:lookup:date:"
	cacheCloudcompDayAtcvInfoUserDatePrefix = "cache:cloudcomp:dayAtcvInfo:user:date:"
)

type (
	dayAtcvInfoModel interface {
		Insert(ctx context.Context, data *DayAtcvInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DayAtcvInfo, error)
		Update(ctx context.Context, data *DayAtcvInfo) error
		Delete(ctx context.Context, id int64) error
		FindOneByDateActv(ctx context.Context,date string,actvId,UserId int64)([]*DayAtcvInfo, error)
		RankActvIdByHot(ctx context.Context,Date string) ([]*DayAtcvInfo, error)
		RankUserIdByHot(ctx context.Context,Date string) ([]*DayAtcvInfo, error)
		RankActvIdByLookup(ctx context.Context,Date string) ([]*DayAtcvInfo, error)
	}

	defaultDayAtcvInfoModel struct {
		sqlc.CachedConn
		table string
	}

	DayAtcvInfo struct {
		Id         int64     `db:"id"`
		Date       string    `db:"date"`    // 时间
		ActvId     int64     `db:"actv_id"` // 活动id
		UserId     int64     `db:"user_id"` // 主办方id
		Lookup     int64     `db:"lookup"`  // 活动浏览数量
		Hot        int64     `db:"hot"`     // 今日活跃度
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Join       int64     `db:"join"`        // 今日活动加入量
		PublishDay int64     `db:"publish_day"` // 发布天数
	}

	DayLookup struct{
		ActvId     int64     `db:"actv_id"` // 活动id
		Lookup     int64     `db:"lookup"`  // 活动浏览数量 七天之和
	}

	DayHot struct{
		ActvId     int64     `db:"actv_id"` // 活动id
		Hot        int64     `db:"hot"`     // 活跃度 之和
	}

	DayUser struct{
		UserId     int64     `db:"user_id"` // 主办方id
		Hot        int64     `db:"hot"`     // 活跃度 之和
	}

)

func newDayAtcvInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDayAtcvInfoModel {
	return &defaultDayAtcvInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`day_atcv_info`",
	}
}

func (m *defaultDayAtcvInfoModel) Delete(ctx context.Context, id int64) error {
	cloudcompDayAtcvInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDayAtcvInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cloudcompDayAtcvInfoIdKey)
	return err
}

func (m *defaultDayAtcvInfoModel) FindOne(ctx context.Context, id int64) (*DayAtcvInfo, error) {
	
	cloudcompDayAtcvInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDayAtcvInfoIdPrefix, id)
	var resp DayAtcvInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompDayAtcvInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dayAtcvInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDayAtcvInfoModel) Insert(ctx context.Context, data *DayAtcvInfo) (sql.Result, error) {
	cloudcompDayAtcvInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDayAtcvInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, dayAtcvInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Date, data.ActvId, data.UserId, data.Lookup, data.Hot, data.Join, data.PublishDay)
	}, cloudcompDayAtcvInfoIdKey)
	return ret, err
}

func (m *defaultDayAtcvInfoModel) Update(ctx context.Context, data *DayAtcvInfo) error {
	cloudcompDayAtcvInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDayAtcvInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dayAtcvInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Date, data.ActvId, data.UserId, data.Lookup, data.Hot, data.Join, data.PublishDay, data.Id)
	}, cloudcompDayAtcvInfoIdKey)
	return err
}

func (m *defaultDayAtcvInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompDayAtcvInfoIdPrefix, primary)
}

func (m *defaultDayAtcvInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dayAtcvInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDayAtcvInfoModel) tableName() string {
	return m.table
}

func (m *defaultDayAtcvInfoModel) FindOneByDateActv(ctx context.Context,date string,actvId,UserId int64) ([]*DayAtcvInfo, error) {
	
	// cacheCloudcompDayAtcvInfoDateActvKey :=fmt.Sprintf("%s%s:%d:%d",cacheCloudcompDayAtcvInfoDateActvPrefix,date,actvId,UserId)

	// fmt.Printf("-------------------------------------\ndate:%s\nactvId:%d\n存入%s中\n--------------------------------",date,actvId,cacheCloudcompDayAtcvInfoDateActvKey)
	var resp []*DayAtcvInfo

	// err := m.QueryRowCtx(ctx, &resp, cacheCloudcompDayAtcvInfoDateActvKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
	// 	query := fmt.Sprintf("select %s from %s where `date` = ? and `actv_id` =? and `user_id`  limit 1", dayAtcvInfoRows, m.table)
		
	// 	fmt.Printf("-------------------------------%s\n----------------------------",query)
	// 	return conn.QueryRowCtx(ctx, v, query, date,actvId,UserId)
	// })

	query := fmt.Sprintf("select %s from %s where  `date` ='%s' and `actv_id` =%d and `user_id` =%d limit 1" , dayAtcvInfoRows, m.table, date,actvId,UserId)
	fmt.Printf("----------------------------------------\nquery:%s\n--------------------------------------",query)
	err := m.QueryRowsNoCache(&resp, query)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultDayAtcvInfoModel) RankActvIdByHot(ctx context.Context,Date string) ([]*DayAtcvInfo, error){

	cacheCloudcompDayAtcvInfoHotDateKey := fmt.Sprintf("%s%v",cacheCloudcompDayAtcvInfoHotDatePrefix, Date)

	var resp []*DayAtcvInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompDayAtcvInfoHotDateKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("SELECT %s, SUM(`hot`) AS hot FROM %s WHERE `date` IN (%s) GROUP BY `actv_id` ORDER BY hot DESC;",dayAtcvInfoRows, m.table,Date)
		fmt.Printf("---------------------------------------------SearchByActvName query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultDayAtcvInfoModel) RankActvIdByLookup(ctx context.Context,Date string) ([]*DayAtcvInfo, error){

	cacheCloudcompDayAtcvInfoLookupDateKey := fmt.Sprintf("%s%v",cacheCloudcompDayAtcvInfoLookupDatePrefix, Date)

	var resp []*DayAtcvInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompDayAtcvInfoLookupDateKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("SELECT %s, SUM(`lookup`) AS lookup FROM %s WHERE `date` IN (%s) GROUP BY `actv_id` ORDER BY lookup DESC;",dayAtcvInfoRows, m.table,Date)
		fmt.Printf("---------------------------------------------RankActvIdByLookup query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultDayAtcvInfoModel) RankUserIdByHot(ctx context.Context,Date string) ([]*DayAtcvInfo, error){

	cacheCloudcompDayAtcvInfoUserDateKey := fmt.Sprintf("%s%v",cacheCloudcompDayAtcvInfoUserDatePrefix, Date)

	var resp []*DayAtcvInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompDayAtcvInfoUserDateKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("SELECT %s, SUM(`hot`) AS hot FROM %s WHERE `date` IN (%s) GROUP BY `user_id` ORDER BY hot DESC;",dayAtcvInfoRows, m.table,Date)
		fmt.Printf("---------------------------------------------RankUserIdByHot query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
