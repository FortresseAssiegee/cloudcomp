// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagTreeFieldNames          = builder.RawFieldNames(&TagTree{})
	tagTreeRows                = strings.Join(tagTreeFieldNames, ",")
	tagTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(tagTreeFieldNames, "`tag_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tagTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(tagTreeFieldNames, "`tag_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompTagTreeTagIdPrefix = "cache:cloudcomp:tagTree:tagId:"
)

type (
	tagTreeModel interface {
		Insert(ctx context.Context, data *TagTree) (sql.Result, error)
		FindOne(ctx context.Context, tagId int64) (*TagTree, error)
		Update(ctx context.Context, data *TagTree) error
		Delete(ctx context.Context, tagId int64) error
		FindAll(ctx context.Context) ([]*TagTree, error) 
		FindAllHot(ctx context.Context) ([]int64, error)
	}

	defaultTagTreeModel struct {
		sqlc.CachedConn
		table string
	}

	TagTree struct {
		TagId      int64     `db:"tag_id"`
		ParentId   int64     `db:"parent_id"` // 父节点
		Label      string    `db:"label"`     // 节点名称
		Hot        int64     `db:"hot"`       // 是否为热点标签
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newTagTreeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTagTreeModel {
	return &defaultTagTreeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tag_tree`",
	}
}

func (m *defaultTagTreeModel) Delete(ctx context.Context, tagId int64) error {
	cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix, tagId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `tag_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, tagId)
	}, cloudcompTagTreeTagIdKey)
	return err
}

func (m *defaultTagTreeModel) FindOne(ctx context.Context, tagId int64) (*TagTree, error) {
	cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix, tagId)
	var resp TagTree
	err := m.QueryRowCtx(ctx, &resp, cloudcompTagTreeTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagTreeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, tagId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagTreeModel) Insert(ctx context.Context, data *TagTree) (sql.Result, error) {
	cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix, data.TagId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tagTreeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Label, data.Hot)
	}, cloudcompTagTreeTagIdKey)
	return ret, err
}

func (m *defaultTagTreeModel) Update(ctx context.Context, data *TagTree) error {
	cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix, data.TagId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `tag_id` = ?", m.table, tagTreeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Label, data.Hot, data.TagId)
	}, cloudcompTagTreeTagIdKey)
	return err
}

func (m *defaultTagTreeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix, primary)
}

func (m *defaultTagTreeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagTreeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTagTreeModel) tableName() string {
	return m.table
}

func (m *defaultTagTreeModel) FindAll(ctx context.Context) ([]*TagTree, error) {
	// cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix,"all")
	var resp []*TagTree
	// err := m.QueryRowCtx(ctx, &resp, cloudcompTagTreeTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
	// 	query := fmt.Sprintf("select %s from %s ", tagTreeRows, m.table)
	// 	return conn.QueryRowCtx(ctx, v, query)
	// })

	query := fmt.Sprintf("select %s from %s ", tagTreeRows, m.table)
	err := m.QueryRowsNoCache(&resp, query)
   
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultTagTreeModel) FindAllHot(ctx context.Context) ([]int64, error) {
	// cloudcompTagTreeTagIdKey := fmt.Sprintf("%s%v", cacheCloudcompTagTreeTagIdPrefix,"allHot")
	var resp []int64
	tagRow :="`tag_id`"
	// err := m.QueryRowCtx(ctx, &resp, cloudcompTagTreeTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
	// 	query := fmt.Sprintf("select %s from %s where `hot` = ?", tagRow, m.table)
	// 	return conn.QueryRowCtx(ctx, v, query,1)
	// })
		query := fmt.Sprintf("select %s from %s where `hot` = 1", tagRow, m.table)
		err := m.QueryRowsNoCache(&resp, query)

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}