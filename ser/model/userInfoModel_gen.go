// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompUserInfoUserIdPrefix   = "cache:cloudcomp:userInfo:userId:"
	cacheCloudcompUserInfoTelPrefix      = "cache:cloudcomp:userInfo:tel:"
	cacheCloudcompUserInfoUserNamePrefix = "cache:cloudcomp:userInfo:userName:"
	cacheCloudcompUserInfoGradePrefix = "cache:cloudcomp:userInfo:grade:"
	cacheCloudcompUserInfoSearchPrefix = "cache:cloudcomp:userInfo:search:"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*UserInfo, error)
		FindOneByTel(ctx context.Context, tel string) (*UserInfo, error)
		FindOneByUserName(ctx context.Context, userName string) (*UserInfo, error)
		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, userId int64) error

		FindNumByGrade(ctx context.Context, num int64) ([]*UserInfo, error)
		SearchByUserName(ctx context.Context,userName string) ([]*UserInfo, error)
	}

	defaultUserInfoModel struct {
		sqlc.CachedConn
		table string
	}

	UserInfo struct {
		UserId     int64     `db:"user_id"`
		UserName   string    `db:"user_name"`
		Avt        string    `db:"avt"` // 用户头像
		Tel        string    `db:"tel"` // 用户电话
		Pwd        string    `db:"pwd"` // 用户密码
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Grade      int64     `db:"grade"` // 优先级
		Intro      string    `db:"intro"` // 自我介绍
		Email      string    `db:"email"` // 邮箱
	}
)

func newUserInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_info`",
	}
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	cloudcompUserInfoTelKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoTelPrefix, data.Tel)
	cloudcompUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserIdPrefix, userId)
	cloudcompUserInfoUserNameKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserNamePrefix, data.UserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, cloudcompUserInfoTelKey, cloudcompUserInfoUserIdKey, cloudcompUserInfoUserNameKey)
	return err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, userId int64) (*UserInfo, error) {
	cloudcompUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserIdPrefix, userId)
	var resp UserInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompUserInfoUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) FindOneByTel(ctx context.Context, tel string) (*UserInfo, error) {
	cloudcompUserInfoTelKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoTelPrefix, tel)
	var resp UserInfo
	err := m.QueryRowIndexCtx(ctx, &resp, cloudcompUserInfoTelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `tel` = ? limit 1", userInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tel); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) FindOneByUserName(ctx context.Context, userName string) (*UserInfo, error) {
	cloudcompUserInfoUserNameKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserNamePrefix, userName)
	var resp UserInfo
	err := m.QueryRowIndexCtx(ctx, &resp, cloudcompUserInfoUserNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_name` = ? limit 1", userInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userName); 
		err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	cloudcompUserInfoTelKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoTelPrefix, data.Tel)
	cloudcompUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserIdPrefix, data.UserId)
	cloudcompUserInfoUserNameKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserNamePrefix, data.UserName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserName, data.Avt, data.Tel, data.Pwd, data.Grade, data.Intro, data.Email)
	}, cloudcompUserInfoTelKey, cloudcompUserInfoUserIdKey, cloudcompUserInfoUserNameKey)
	return ret, err
}

func (m *defaultUserInfoModel) Update(ctx context.Context, newData *UserInfo) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	cloudcompUserInfoTelKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoTelPrefix, data.Tel)
	cloudcompUserInfoUserIdKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserIdPrefix, data.UserId)
	cloudcompUserInfoUserNameKey := fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserNamePrefix, data.UserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserName, newData.Avt, newData.Tel, newData.Pwd, newData.Grade, newData.Intro, newData.Email, newData.UserId)
	}, cloudcompUserInfoTelKey, cloudcompUserInfoUserIdKey, cloudcompUserInfoUserNameKey)
	return err
}

func (m *defaultUserInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompUserInfoUserIdPrefix, primary)
}

func (m *defaultUserInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}


func (m *defaultUserInfoModel) FindNumByGrade(ctx context.Context, num int64) ([]*UserInfo, error) {
	cacheCloudcompUserInfoGradeKey := fmt.Sprintf("%s%v",cacheCloudcompUserInfoGradePrefix, num)
	fmt.Println("num",cacheCloudcompUserInfoGradeKey)
	var resp []*UserInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompUserInfoGradeKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s  where `grade` > 0  order by `grade` desc  limit %d", userInfoRows, m.table,num)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultUserInfoModel) SearchByUserName(ctx context.Context,userName string) ([]*UserInfo, error){

	cacheCloudcompUserInfoSearchKey := fmt.Sprintf("%s%v",cacheCloudcompUserInfoSearchPrefix, userName)

	var resp []*UserInfo

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompUserInfoSearchKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s  WHERE `user_name` LIKE '%c%s%c'", userInfoRows, m.table,'%',userName,'%')
		fmt.Printf("---------------------------------------------SearchByUserName query:%s--------------------------------\n",query)
		return conn.QueryRows(&resp, query)
	})

	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}