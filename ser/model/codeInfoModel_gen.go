// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	codeInfoFieldNames          = builder.RawFieldNames(&CodeInfo{})
	codeInfoRows                = strings.Join(codeInfoFieldNames, ",")
	codeInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(codeInfoFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	codeInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(codeInfoFieldNames, "`code`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompCodeInfoCodePrefix  = "cache:cloudcomp:codeInfo:code:"
	cacheCloudcompCodeInfoLabelPrefix = "cache:cloudcomp:codeInfo:label:"
)

type (
	codeInfoModel interface {
		Insert(ctx context.Context, data *CodeInfo) (sql.Result, error)
		FindOne(ctx context.Context, code int64) (*CodeInfo, error)
		FindOneByLabel(ctx context.Context, label string) (*CodeInfo, error)
		Update(ctx context.Context, data *CodeInfo) error
		Delete(ctx context.Context, code int64) error
	}

	defaultCodeInfoModel struct {
		sqlc.CachedConn
		table string
	}

	CodeInfo struct {
		Code       int64     `db:"code"`
		Label      string    `db:"label"`   // 含义
		Content    string    `db:"content"` // 说明
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newCodeInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCodeInfoModel {
	return &defaultCodeInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`code_info`",
	}
}

func (m *defaultCodeInfoModel) Delete(ctx context.Context, code int64) error {
	data, err := m.FindOne(ctx, code)
	if err != nil {
		return err
	}

	cloudcompCodeInfoCodeKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoCodePrefix, code)
	cloudcompCodeInfoLabelKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoLabelPrefix, data.Label)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `code` = ?", m.table)
		return conn.ExecCtx(ctx, query, code)
	}, cloudcompCodeInfoCodeKey, cloudcompCodeInfoLabelKey)
	return err
}

func (m *defaultCodeInfoModel) FindOne(ctx context.Context, code int64) (*CodeInfo, error) {
	cloudcompCodeInfoCodeKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoCodePrefix, code)
	var resp CodeInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompCodeInfoCodeKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", codeInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, code)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCodeInfoModel) FindOneByLabel(ctx context.Context, label string) (*CodeInfo, error) {
	cloudcompCodeInfoLabelKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoLabelPrefix, label)
	var resp CodeInfo
	err := m.QueryRowIndexCtx(ctx, &resp, cloudcompCodeInfoLabelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `label` = ? limit 1", codeInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, label); err != nil {
			return nil, err
		}
		return resp.Code, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCodeInfoModel) Insert(ctx context.Context, data *CodeInfo) (sql.Result, error) {
	cloudcompCodeInfoCodeKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoCodePrefix, data.Code)
	cloudcompCodeInfoLabelKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoLabelPrefix, data.Label)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, codeInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Code, data.Label, data.Content)
	}, cloudcompCodeInfoCodeKey, cloudcompCodeInfoLabelKey)
	return ret, err
}

func (m *defaultCodeInfoModel) Update(ctx context.Context, newData *CodeInfo) error {
	data, err := m.FindOne(ctx, newData.Code)
	if err != nil {
		return err
	}

	cloudcompCodeInfoCodeKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoCodePrefix, data.Code)
	cloudcompCodeInfoLabelKey := fmt.Sprintf("%s%v", cacheCloudcompCodeInfoLabelPrefix, data.Label)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `code` = ?", m.table, codeInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Label, newData.Content, newData.Code)
	}, cloudcompCodeInfoCodeKey, cloudcompCodeInfoLabelKey)
	return err
}

func (m *defaultCodeInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompCodeInfoCodePrefix, primary)
}

func (m *defaultCodeInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", codeInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCodeInfoModel) tableName() string {
	return m.table
}
