// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	examInfoFieldNames          = builder.RawFieldNames(&ExamInfo{})
	examInfoRows                = strings.Join(examInfoFieldNames, ",")
	examInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(examInfoFieldNames, "`exam_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	examInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(examInfoFieldNames, "`exam_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompExamInfoExamIdPrefix = "cache:cloudcomp:examInfo:examId:"
)

type (
	examInfoModel interface {
		Insert(ctx context.Context, data *ExamInfo) (sql.Result, error)
		FindOne(ctx context.Context, examId int64) (*ExamInfo, error)
		Update(ctx context.Context, data *ExamInfo) error
		Delete(ctx context.Context, examId int64) error
		FindAllExamByUnitId(UnitId int64) ([]*ExamInfo, error) 
	}

	defaultExamInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ExamInfo struct {
		ExamId     int64     `db:"exam_id"`
		UnitId     int64     `db:"unit_id"` // 那颗tree的id
		Title      string    `db:"title"`   // 题目
		Quest      string    `db:"quest"`   // 选项
		Answer     string    `db:"answer"`  // 答案
		Img        string    `db:"img"`     // 图片
		Method     int64     `db:"method"`  // 图片
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		During     int64     `db:"during"` // 这道题的答题时间s
		Score      float64   `db:"score"`  // 题的分数
	}
)

func newExamInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultExamInfoModel {
	return &defaultExamInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`exam_info`",
	}
}

func (m *defaultExamInfoModel) Delete(ctx context.Context, examId int64) error {
	cloudcompExamInfoExamIdKey := fmt.Sprintf("%s%v", cacheCloudcompExamInfoExamIdPrefix, examId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `exam_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, examId)
	}, cloudcompExamInfoExamIdKey)
	return err
}

func (m *defaultExamInfoModel) FindOne(ctx context.Context, examId int64) (*ExamInfo, error) {
	cloudcompExamInfoExamIdKey := fmt.Sprintf("%s%v", cacheCloudcompExamInfoExamIdPrefix, examId)
	var resp ExamInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompExamInfoExamIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `exam_id` = ? limit 1", examInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, examId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExamInfoModel) Insert(ctx context.Context, data *ExamInfo) (sql.Result, error) {
	cloudcompExamInfoExamIdKey := fmt.Sprintf("%s%v", cacheCloudcompExamInfoExamIdPrefix, data.ExamId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, examInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UnitId, data.Title, data.Quest, data.Answer, data.Img, data.Method, data.During, data.Score)
	}, cloudcompExamInfoExamIdKey)
	return ret, err
}

func (m *defaultExamInfoModel) Update(ctx context.Context, data *ExamInfo) error {
	cloudcompExamInfoExamIdKey := fmt.Sprintf("%s%v", cacheCloudcompExamInfoExamIdPrefix, data.ExamId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `exam_id` = ?", m.table, examInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UnitId, data.Title, data.Quest, data.Answer, data.Img, data.Method, data.During, data.Score, data.ExamId)
	}, cloudcompExamInfoExamIdKey)
	return err
}

func (m *defaultExamInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompExamInfoExamIdPrefix, primary)
}

func (m *defaultExamInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `exam_id` = ? limit 1", examInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultExamInfoModel) tableName() string {
	return m.table
}

func (m *defaultExamInfoModel) FindAllExamByUnitId(UnitId int64) ([]*ExamInfo, error) {
	var resp []*ExamInfo
	query := fmt.Sprintf("select %s from %s where `unit_id` = ?", examInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, UnitId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}