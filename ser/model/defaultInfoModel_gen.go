// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	defaultInfoFieldNames          = builder.RawFieldNames(&DefaultInfo{})
	defaultInfoRows                = strings.Join(defaultInfoFieldNames, ",")
	defaultInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(defaultInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	defaultInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(defaultInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompDefaultInfoIdPrefix  = "cache:cloudcomp:defaultInfo:id:"
	cacheCloudcompDefaultInfoKeyPrefix = "cache:cloudcomp:defaultInfo:key:"
)

type (
	defaultInfoModel interface {
		Insert(ctx context.Context, data *DefaultInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DefaultInfo, error)
		FindOneByKey(ctx context.Context, key string) (*DefaultInfo, error)
		Update(ctx context.Context, data *DefaultInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDefaultInfoModel struct {
		sqlc.CachedConn
		table string
	}

	DefaultInfo struct {
		Id         int64     `db:"id"`
		Key        string    `db:"key"`   // 键值
		Value      string    `db:"value"` // z值
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newDefaultInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDefaultInfoModel {
	return &defaultDefaultInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`default_info`",
	}
}

func (m *defaultDefaultInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	cloudcompDefaultInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoIdPrefix, id)
	cloudcompDefaultInfoKeyKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoKeyPrefix, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cloudcompDefaultInfoIdKey, cloudcompDefaultInfoKeyKey)
	return err
}

func (m *defaultDefaultInfoModel) FindOne(ctx context.Context, id int64) (*DefaultInfo, error) {
	cloudcompDefaultInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoIdPrefix, id)
	var resp DefaultInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompDefaultInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", defaultInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDefaultInfoModel) FindOneByKey(ctx context.Context, key string) (*DefaultInfo, error) {
	cloudcompDefaultInfoKeyKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoKeyPrefix, key)
	var resp DefaultInfo
	err := m.QueryRowIndexCtx(ctx, &resp, cloudcompDefaultInfoKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `key` = ? limit 1", defaultInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, key); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDefaultInfoModel) Insert(ctx context.Context, data *DefaultInfo) (sql.Result, error) {
	cloudcompDefaultInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoIdPrefix, data.Id)
	cloudcompDefaultInfoKeyKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoKeyPrefix, data.Key)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, defaultInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Key, data.Value)
	}, cloudcompDefaultInfoIdKey, cloudcompDefaultInfoKeyKey)
	return ret, err
}

func (m *defaultDefaultInfoModel) Update(ctx context.Context, newData *DefaultInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cloudcompDefaultInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoIdPrefix, data.Id)
	cloudcompDefaultInfoKeyKey := fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoKeyPrefix, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, defaultInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Key, newData.Value, newData.Id)
	}, cloudcompDefaultInfoIdKey, cloudcompDefaultInfoKeyKey)
	return err
}

func (m *defaultDefaultInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompDefaultInfoIdPrefix, primary)
}

func (m *defaultDefaultInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", defaultInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDefaultInfoModel) tableName() string {
	return m.table
}
