// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	joinInfoFieldNames          = builder.RawFieldNames(&JoinInfo{})
	joinInfoRows                = strings.Join(joinInfoFieldNames, ",")
	joinInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(joinInfoFieldNames, "`join_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	joinInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(joinInfoFieldNames, "`join_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompJoinInfoJoinIdPrefix = "cache:cloudcomp:joinInfo:joinId:"
)

type (
	joinInfoModel interface {
		Insert(ctx context.Context, data *JoinInfo) (sql.Result, error)
		FindOne(ctx context.Context, joinId int64) (*JoinInfo, error)
		Update(ctx context.Context, data *JoinInfo) error
		Delete(ctx context.Context, joinId int64) error
		FindAllJoinByUserJoinId(userId int64) ([]*JoinInfo, error) 
		FindAllJoinByActvId(actvId int64) ([]*JoinInfo, error)
		FindJoinByThreeId(actvId, userCreateId, userJoinId int64) ([]*JoinInfo, error)
	}

	defaultJoinInfoModel struct {
		sqlc.CachedConn
		table string
	}

	JoinInfo struct {
		JoinId       int64     `db:"join_id"`
		ActvId       int64     `db:"actv_id"`        // 活动id
		UserCreateId int64     `db:"user_create_id"` // 主办方
		UserJoinId   int64     `db:"user_join_id"`   // 参与者
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newJoinInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultJoinInfoModel {
	return &defaultJoinInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`join_info`",
	}
}

func (m *defaultJoinInfoModel) Delete(ctx context.Context, joinId int64) error {
	cloudcompJoinInfoJoinIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinInfoJoinIdPrefix, joinId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `join_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, joinId)
	}, cloudcompJoinInfoJoinIdKey)
	return err
}

func (m *defaultJoinInfoModel) FindOne(ctx context.Context, joinId int64) (*JoinInfo, error) {
	cloudcompJoinInfoJoinIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinInfoJoinIdPrefix, joinId)
	var resp JoinInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompJoinInfoJoinIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `join_id` = ? limit 1", joinInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, joinId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJoinInfoModel) Insert(ctx context.Context, data *JoinInfo) (sql.Result, error) {
	cloudcompJoinInfoJoinIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinInfoJoinIdPrefix, data.JoinId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, joinInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ActvId, data.UserCreateId, data.UserJoinId)
	}, cloudcompJoinInfoJoinIdKey)
	return ret, err
}

func (m *defaultJoinInfoModel) Update(ctx context.Context, data *JoinInfo) error {
	cloudcompJoinInfoJoinIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinInfoJoinIdPrefix, data.JoinId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `join_id` = ?", m.table, joinInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ActvId, data.UserCreateId, data.UserJoinId, data.JoinId)
	}, cloudcompJoinInfoJoinIdKey)
	return err
}

func (m *defaultJoinInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompJoinInfoJoinIdPrefix, primary)
}

func (m *defaultJoinInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `join_id` = ? limit 1", joinInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultJoinInfoModel) tableName() string {
	return m.table
}

// 自己添加
func (m *defaultJoinInfoModel) FindAllJoinByUserJoinId(userId int64) ([]*JoinInfo, error) {
	var resp []*JoinInfo
   fmt.Println("\nFindAllJoinByUserJoinId")
	query := fmt.Sprintf("select %s from %s where `user_join_id` = ? ", joinInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, userId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

// 自己添加
func (m *defaultJoinInfoModel) FindAllJoinByActvId(actvId int64) ([]*JoinInfo, error) {
	var resp []*JoinInfo
   fmt.Println("\nFindAllJoinByActvId")
	query := fmt.Sprintf("select %s from %s where `actv_id` = ? ", joinInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, actvId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}


// 自己添加 UserCreateId  UserJoinId
func (m *defaultJoinInfoModel) FindJoinByThreeId(actvId, userCreateId, userJoinId int64) ([]*JoinInfo, error) {
	var resp []*JoinInfo
   fmt.Println("\nFindJoinByThreeId")
	query := fmt.Sprintf("select %s from %s where  `actv_id` = ? and `user_create_id` = ? and `user_join_id` = ? limit 1", joinInfoRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, actvId,userCreateId,userJoinId)
   fmt.Printf("\n-------------------------------------FindJoinByThreeId resp:%+v-------------------------------------------\n",resp)
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}