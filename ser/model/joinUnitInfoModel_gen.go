// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	joinUnitInfoFieldNames          = builder.RawFieldNames(&JoinUnitInfo{})
	joinUnitInfoRows                = strings.Join(joinUnitInfoFieldNames, ",")
	joinUnitInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(joinUnitInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	joinUnitInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(joinUnitInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompJoinUnitInfoIdPrefix = "cache:cloudcomp:joinUnitInfo:id:"
	cacheCloudcompJoinUnitInfoUnitCreateUserIdPrefix ="cache:cloudcomp:joinUnitInfo:unitId:createUserId"
	cacheCloudcompJoinUnitInfoUnitJoinUserIdPrefix="cache:cloudcomp:joinUnitInfo:unitId:joinUserId:"
	cacheCloudcompJoinUnitIdPrefix = "cache:cloudcomp:joinUnitInfo:unitId:"


)

type (
	joinUnitInfoModel interface {
		Insert(ctx context.Context, data *JoinUnitInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*JoinUnitInfo, error)
		Update(ctx context.Context, data *JoinUnitInfo) error
		Delete(ctx context.Context, id int64) error
		FindJoinByUnitCreateUserId(ctx context.Context,unitId, userCreateId int64) ([]*JoinUnitInfo, error)
		FindJoinByUnitJoinUserId(ctx context.Context,unitId, userJoinId int64) ([]*JoinUnitInfo, error)  
		FindJoinByUnitId(ctx context.Context,unitId int64) ([]*JoinUnitInfo, error)
	}

	defaultJoinUnitInfoModel struct {
		sqlc.CachedConn
		table string
	}

	JoinUnitInfo struct {
		Id           int64     `db:"id"`
		UnitId       int64     `db:"unit_id"`        // 单元id
		ActvId       int64     `db:"actv_id"`        // 活动id
		UserCreateId int64     `db:"user_create_id"` // 主办方
		UserJoinId   int64     `db:"user_join_id"`   // 参与者
		Score        float64   `db:"score"`          // 分数
		Intro        string    `db:"intro"`          // 补充信息
		Illegal      string    `db:"illegal"`        // 是否违规
		IllegalIntro string    `db:"illegal_intro"`  // 违规记录
		StartTime    string    `db:"start_time"`     // 考试时间
		EndTime      string    `db:"end_time"`       // 交卷时间
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newJoinUnitInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultJoinUnitInfoModel {
	return &defaultJoinUnitInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`join_unit_info`",
	}
}

func (m *defaultJoinUnitInfoModel) Delete(ctx context.Context, id int64) error {
	cloudcompJoinUnitInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinUnitInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cloudcompJoinUnitInfoIdKey)
	return err
}

func (m *defaultJoinUnitInfoModel) FindOne(ctx context.Context, id int64) (*JoinUnitInfo, error) {
	cloudcompJoinUnitInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinUnitInfoIdPrefix, id)
	var resp JoinUnitInfo
	err := m.QueryRowCtx(ctx, &resp, cloudcompJoinUnitInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", joinUnitInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJoinUnitInfoModel) Insert(ctx context.Context, data *JoinUnitInfo) (sql.Result, error) {
	cloudcompJoinUnitInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinUnitInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, joinUnitInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UnitId, data.ActvId, data.UserCreateId, data.UserJoinId, data.Score, data.Intro, data.Illegal, data.IllegalIntro, data.StartTime, data.EndTime)
	}, cloudcompJoinUnitInfoIdKey)
	return ret, err
}

func (m *defaultJoinUnitInfoModel) Update(ctx context.Context, data *JoinUnitInfo) error {
	cloudcompJoinUnitInfoIdKey := fmt.Sprintf("%s%v", cacheCloudcompJoinUnitInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, joinUnitInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UnitId, data.ActvId, data.UserCreateId, data.UserJoinId, data.Score, data.Intro, data.Illegal, data.IllegalIntro, data.StartTime, data.EndTime, data.Id)
	}, cloudcompJoinUnitInfoIdKey)
	return err
}

func (m *defaultJoinUnitInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompJoinUnitInfoIdPrefix, primary)
}

func (m *defaultJoinUnitInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", joinUnitInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultJoinUnitInfoModel) tableName() string {
	return m.table
}

// 自己添加 UserCreateId  UserJoinId
func (m *defaultJoinUnitInfoModel) FindJoinByUnitCreateUserId(ctx context.Context,unitId, userCreateId int64) ([]*JoinUnitInfo, error) {
	var resp []*JoinUnitInfo
	cacheCloudcompJoinUnitInfoUnitCreateUserIdKey := fmt.Sprintf("%s%v:%v",cacheCloudcompJoinUnitInfoUnitCreateUserIdPrefix, unitId,userCreateId)
	
	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompJoinUnitInfoUnitCreateUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where  `unit_id` = ? and `user_create_id` = ? ", joinUnitInfoRows, m.table)
		fmt.Printf("---------------------------------------------FindJoinByUnitCreateUserId query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query,unitId, userCreateId )
	})


	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

func (m *defaultJoinUnitInfoModel) FindJoinByUnitJoinUserId(ctx context.Context,unitId, userJoinId int64) ([]*JoinUnitInfo, error) {
	var resp []*JoinUnitInfo
	cacheCloudcompJoinUnitInfoUnitJoinUserIdKey := fmt.Sprintf("%s%v:%v",cacheCloudcompJoinUnitInfoUnitJoinUserIdPrefix, unitId,userJoinId)

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompJoinUnitInfoUnitJoinUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where  `unit_id` = ? and `user_join_id` = ? ", joinUnitInfoRows, m.table)
		fmt.Printf("---------------------------------------------FindJoinByUnitJoinUserId query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query, unitId,userJoinId)
	})


	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

func (m *defaultJoinUnitInfoModel) FindJoinByUnitId(ctx context.Context,unitId int64) ([]*JoinUnitInfo, error) {
	var resp []*JoinUnitInfo
	cacheCloudcompJoinUnitIdKey := fmt.Sprintf("%s%v",cacheCloudcompJoinUnitIdPrefix, unitId)

	err := m.QueryRowCtx(ctx, &resp, cacheCloudcompJoinUnitIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where  `unit_id` = ? ", joinUnitInfoRows, m.table)
		fmt.Printf("---------------------------------------------FindJoinByUnitId query:%s---------------------------------------------\n",query)
		return conn.QueryRows(&resp, query, unitId)
	})

	

	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
}

