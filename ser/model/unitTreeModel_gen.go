// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	unitTreeFieldNames          = builder.RawFieldNames(&UnitTree{})
	unitTreeRows                = strings.Join(unitTreeFieldNames, ",")
	unitTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(unitTreeFieldNames, "`unit_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	unitTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(unitTreeFieldNames, "`unit_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCloudcompUnitTreeUnitIdPrefix = "cache:cloudcomp:unitTree:unitId:"
)

type (
	unitTreeModel interface {
		Insert(ctx context.Context, data *UnitTree) (sql.Result, error)
		FindOne(ctx context.Context, unitId int64) (*UnitTree, error)
		Update(ctx context.Context, data *UnitTree) error
		Delete(ctx context.Context, unitId int64) error
		FindAllActvByActvId(ActvId int64) ([]*UnitTree, error) 
	}

	defaultUnitTreeModel struct {
		sqlc.CachedConn
		table string
	}

	UnitTree struct {
		UnitId     int64     `db:"unit_id"`
		ActvId     int64     `db:"actv_id"`   // 那颗tree的id
		ParentId   int64     `db:"parent_id"` // 父节点
		Title      string    `db:"title"`     // 节点名称
		Tips       string    `db:"tips"`      // 提示，不超过200字
		FileName   string    `db:"file_name"` // 获取考试地址
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		ExamCode   int64     `db:"exam_code"` // 考试模式
		During     int64     `db:"during"`    // 考试时间min
		Face       int64     `db:"face"`      // 是否人脸识别
		Count      int64     `db:"count"`     // 题目数量，0为全部题
		StartTime  string    `db:"startTime"` // 考试开始时间
		EndTime    string    `db:"endTime"`
		Model      int64     `db:"model"` // 单元模式
	}
)

func newUnitTreeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUnitTreeModel {
	return &defaultUnitTreeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`unit_tree`",
	}
}

func (m *defaultUnitTreeModel) Delete(ctx context.Context, unitId int64) error {
	cloudcompUnitTreeUnitIdKey := fmt.Sprintf("%s%v", cacheCloudcompUnitTreeUnitIdPrefix, unitId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `unit_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, unitId)
	}, cloudcompUnitTreeUnitIdKey)
	return err
}

func (m *defaultUnitTreeModel) FindOne(ctx context.Context, unitId int64) (*UnitTree, error) {
	cloudcompUnitTreeUnitIdKey := fmt.Sprintf("%s%v", cacheCloudcompUnitTreeUnitIdPrefix, unitId)
	var resp UnitTree
	err := m.QueryRowCtx(ctx, &resp, cloudcompUnitTreeUnitIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `unit_id` = ? limit 1", unitTreeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, unitId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUnitTreeModel) Insert(ctx context.Context, data *UnitTree) (sql.Result, error) {
	cloudcompUnitTreeUnitIdKey := fmt.Sprintf("%s%v", cacheCloudcompUnitTreeUnitIdPrefix, data.UnitId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, unitTreeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ActvId, data.ParentId, data.Title, data.Tips, data.FileName, data.ExamCode, data.During, data.Face, data.Count, data.StartTime, data.EndTime, data.Model)
	}, cloudcompUnitTreeUnitIdKey)
	return ret, err
}

func (m *defaultUnitTreeModel) Update(ctx context.Context, data *UnitTree) error {
	cloudcompUnitTreeUnitIdKey := fmt.Sprintf("%s%v", cacheCloudcompUnitTreeUnitIdPrefix, data.UnitId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `unit_id` = ?", m.table, unitTreeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ActvId, data.ParentId, data.Title, data.Tips, data.FileName, data.ExamCode, data.During, data.Face, data.Count, data.StartTime, data.EndTime, data.Model, data.UnitId)
	}, cloudcompUnitTreeUnitIdKey)
	return err
}

func (m *defaultUnitTreeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudcompUnitTreeUnitIdPrefix, primary)
}

func (m *defaultUnitTreeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `unit_id` = ? limit 1", unitTreeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUnitTreeModel) tableName() string {
	return m.table
}
func (m *defaultUnitTreeModel) FindAllActvByActvId(ActvId int64) ([]*UnitTree, error) {
	var resp []*UnitTree
   
	query := fmt.Sprintf("select %s from %s where `actv_id` = ?", unitTreeRows, m.table)
	err := m.QueryRowsNoCache(&resp, query, ActvId)
   
	switch err {
	case nil:
	 return resp, nil
	case sqlc.ErrNotFound:
	 return nil, ErrNotFound
	default:
	 return nil, err
	}
   }